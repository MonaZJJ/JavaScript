谈谈对Promise的理解
一、Promise是什么？
Promise是最早由社区提出和实现的一种解决异步编程的方案，比其他传统的解决方案（回调函数和事件）更合理和更强大；

ES6将其写进了语言标准，统一了用法，原生提供了Promise对象；
ES6规定，Promise对象是一个构造函数，用来生成Promise实例；

二、Promise是为解决什么问题而产生的？

promise是为解决异步处理回调金字塔问题而产生的；

三、Promise的两个特点
1、Promise对象的状态不受外界影响
1）pending初始状态
2）fulfilled成功状态
3）rejected失败状态
Promise有以上三种状态，只有异步操作的结果可以决定当前是哪一种状态，其他任何操作都无法改变这个状态
2、Promise的状态一旦改变，就不会再变，任何时候都可以得到这个结果，状态不可以逆，只能由pending变成fullfilled或者由pending变成rejected

四、Promise的三个缺点
1）无法取消Promise，一旦新建它就会立即执行，无法中途取消；
2）如果不设置回调函数，Promise内部抛出的错误，不会反映到外部；
3）当处于pending状态时，无法得知目前进展到哪一个阶段，是刚刚开始还是即将完成；

五、Promise在哪存放成功回调序列和失败回调序列？
1）onResolvedCallbacks成功后要执行的回调序列 是一个数组
2）onRejectedCallbacks失败后要执行的回调序列 是一个数组
以上两个数组存放在Promise创建实例时给Promise这个类传的函数，默认都是空数组；

每次实例then的时候 传入onFullfilled成功回调 onRejected 失败回调，如果此时状态是pending 则将onFullfilled和onRejected push到对应的成功回调序列
和失败回调序列数组中， 如果此时状态为fullfilled 则将 onFullfilled立即执行，如果此时的状态是rejected 则 onRejected立即执行；

上述序列中的回调函数执行的时候是有顺序的，即按照顺序依次执行

六、Promise的用法
1、Promise构造函数接受一个函数作为参数，该函数的两个参数分别是resolve和reject。它们是两个函数，由JavaScript引擎提供，不用自己部署。
const promise = new Promise（function（resolve，reject）{
     //...some code
     if（/*异步操作成功*/）{resolve（value）;}else{reject（error）;}
}）
2、
resolve函数的作用是，将Promise对象的状态从“未完成”变成“成功”（即从pending变未resolve），在异步操作成功时调用，并将异步操作的结果，作为参数传递出去，
reject函数的作用是，将Promise对象的状态从“未完成”变成“失败”（即从pengding变为rejected），在异步操作失败时调用，并将异步操作报出的错误，作为参数传递出去；

3、Promise实例生成以后，可以用then方法分别指定resolved状态和rejected状态的回调函数；

  

